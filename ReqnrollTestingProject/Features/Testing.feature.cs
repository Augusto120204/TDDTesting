// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReqnrollTestingProject.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TestingFeature : object, Xunit.IClassFixture<TestingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Testing", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Testing.feature"
#line hidden
        
        public TestingFeature(TestingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Agregar Cliente valido")]
        [Xunit.TraitAttribute("FeatureTitle", "Testing")]
        [Xunit.TraitAttribute("Description", "Agregar Cliente valido")]
        [Xunit.TraitAttribute("Category", "AgregarClienteValido")]
        public async System.Threading.Tasks.Task AgregarClienteValido()
        {
            string[] tagsOfScenario = new string[] {
                    "AgregarClienteValido"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Agregar Cliente valido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("Ingresar a la pagina de creacion de clientes.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table8.AddRow(new string[] {
                            "1593574562",
                            "Murillo",
                            "Penelope",
                            "11/15/1999",
                            "pmurillo@gmail.com",
                            "0999996346",
                            "Quito",
                            "1"});
#line 8
 await testRunner.WhenAsync("Llenar los campos dentro del formulario.", ((string)(null)), table8, "When ");
#line hidden
#line 11
 await testRunner.AndAsync("Dar clic en el boton de guardar.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.ThenAsync("Verificar que el cliente fue guardado correctamente.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Agregar Cliente invalido")]
        [Xunit.TraitAttribute("FeatureTitle", "Testing")]
        [Xunit.TraitAttribute("Description", "Agregar Cliente invalido")]
        [Xunit.TraitAttribute("Category", "AgregarClienteInvalido")]
        public async System.Threading.Tasks.Task AgregarClienteInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "AgregarClienteInvalido"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Agregar Cliente invalido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.GivenAsync("Ingresar a la pagina de creacion de clientes.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table9.AddRow(new string[] {
                            "1593574562",
                            "Murillo",
                            "Penelope",
                            "11/15/1999",
                            "pmurillogmailcom",
                            "0999996346",
                            "Quito",
                            "1"});
#line 17
 await testRunner.WhenAsync("Llenar los campos dentro del formulario.", ((string)(null)), table9, "When ");
#line hidden
#line 20
 await testRunner.AndAsync("Dar clic en el boton de guardar.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.ThenAsync("Verificar que el cliente no fue guardado correctamente.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Editar Cliente valido")]
        [Xunit.TraitAttribute("FeatureTitle", "Testing")]
        [Xunit.TraitAttribute("Description", "Editar Cliente valido")]
        [Xunit.TraitAttribute("Category", "EditarClienteValido")]
        public async System.Threading.Tasks.Task EditarClienteValido()
        {
            string[] tagsOfScenario = new string[] {
                    "EditarClienteValido"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Editar Cliente valido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
 await testRunner.GivenAsync("Ingresar a la pagina de edicion de clientes.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table10.AddRow(new string[] {
                            "1593574562",
                            "Murillo",
                            "Penelope",
                            "11/15/1999",
                            "pmurillo@gmail.com",
                            "0999996346",
                            "Quito",
                            "1"});
#line 26
 await testRunner.WhenAsync("Llenar los campos dentro del formulario.", ((string)(null)), table10, "When ");
#line hidden
#line 29
 await testRunner.AndAsync("Dar clic en el boton de editar.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
 await testRunner.ThenAsync("Verificar que el cliente fue editado correctamente.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Editar Cliente invalido")]
        [Xunit.TraitAttribute("FeatureTitle", "Testing")]
        [Xunit.TraitAttribute("Description", "Editar Cliente invalido")]
        [Xunit.TraitAttribute("Category", "EditarClienteInvalido")]
        public async System.Threading.Tasks.Task EditarClienteInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "EditarClienteInvalido"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Editar Cliente invalido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
 await testRunner.GivenAsync("Ingresar a la pagina de edicion de clientes.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Apellidos",
                            "Nombres",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table11.AddRow(new string[] {
                            "1593574562",
                            "Murillo",
                            "Penelope",
                            "11/15/1999",
                            "pmurillogmailcom",
                            "0999996346",
                            "Quito",
                            "1"});
#line 35
 await testRunner.WhenAsync("Llenar los campos dentro del formulario.", ((string)(null)), table11, "When ");
#line hidden
#line 38
 await testRunner.AndAsync("Dar clic en el boton de editar.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
 await testRunner.ThenAsync("Verificar que el cliente no fue editado correctamente.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await TestingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await TestingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
